<?php declare(strict_types=1);

namespace {{ namespace }};

use MadmagesTelegram\Types\Type\InputFile;
use JsonException;

abstract class TypedClient {

    /**
     * Real request engine
     * Should return json string
     *
     * @param string $method
     * @param array  $parameters
     * @return string Returned json string
     */
    abstract public function _apiCall(string $method, array $parameters): string;

    /**
     * @param string $method
     * @param array  $requestParams
     * @param array  $returnType
     * @return mixed
     * @throws {{ exception }}
     */
    private function _requestWithMap(string $method, array $requestParams, array $returnType)
    {
        if (count($returnType) > 1) {
            throw new {{ exception }}('More than one return type is not implemented');
        }

        $responseJson = $this->_apiCall($method, $this->_prepareRequest($requestParams));
        if (empty($returnType)) {
            try {
                return json_decode($responseJson, true, 512, JSON_THROW_ON_ERROR);
            } catch (JsonException $e) {
                throw new {{ exception }}($e->getMessage(), $e->getCode(), $e);
            }
        }

        return Serializer::deserialize($responseJson, $returnType[0]);
    }

    /**
     * @param array $requestParams
     * @return array
     * @throws {{ exception }}
     */
    private function _prepareRequest(array $requestParams): array
    {
        $requestParams = array_filter($requestParams);
        if (empty($requestParams)) {
            return [];
        }

        array_walk_recursive($requestParams, static function(&$item)
        {
            if (!is_object($item)) {
                return;
            }

            if ($item instanceof InputFile) {
                $item = $item->getFile();
                if (!is_resource($item)) {
                    if (is_file($item)) {
                        $item = fopen($item, 'rb');
                        if($item === false) {
                            throw new TelegramException("Failed to open file: {$item}");
                        }
                    } else {
                        throw new TelegramException("Expecting resource or file path: {$item}");
                    }
                }
            } else {
                try {
                    $item = json_decode(Serializer::serialize($item), true, 512, JSON_THROW_ON_ERROR);
                } catch (JsonException $e) {
                    throw new {{ exception }}($e->getMessage(), $e->getCode(), $e);
                }
            }
        });

        return $requestParams;
    }

{% for method in schema.methods %}

    /**
     * {{ method.link }}
     *
     * {{ method.description|paramDescription(2)|striptags|raw }}
     *
{% for parameter in method.parameters|sortByOptional %}
     * @param {{ renderType(parameter.type, namespace, true) }}{%- if not parameter.required %}|null{% endif %} ${{ parameter.name|camelize }}
     *        {{ parameter.description|paramDescription(6)|raw }}
     *
{% endfor %}
     * @return {{ renderType(method.return,namespace,true) }}
     * @throws {{ exception }}
     */
    public function {{ method.name }}(
{% for parameter in method.parameters|sortByOptional %}
        {% if isValidCodeType(parameter.type) -%} {{ renderType(parameter.type, namespace, false) }} {% endif -%}
        ${{ parameter.name|camelize }}
        {%- if not parameter.required %} = null{% endif %}
        {%- if loop.index < method.parameters|length %},{% endif %}

{% endfor %}
    ){% if isValidCodeType(method.return) -%}
        : {{ renderType(method.return, namespace, false) }}
    {%- endif %}

    {
        $requestParameters = [
{% for parameter in method.parameters %}
            '{{ parameter.name }}' => ${{ parameter.name|camelize }},
{% endfor %}
        ];

        $returnType = [
{% for JMSReturnType in getJMSReturnType(method.return, namespace) %}
            {{ JMSReturnType|raw }},
{% endfor %}
        ];

        return $this->_requestWithMap('{{ method.name }}', $requestParameters, $returnType);
    }
{% endfor %}
}